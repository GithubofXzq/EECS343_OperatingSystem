diff --git a/include/ProcessInfo.h b/include/ProcessInfo.h
new file mode 100644
index 0000000..c4d29d5
--- /dev/null
+++ b/include/ProcessInfo.h
@@ -0,0 +1,14 @@
+#ifndef _PROCESSINFO_H_
+#define _PROCESSINFO_H_
+#include "types.h"
+
+struct ProcessInfo{
+	int pid;
+	int ppid;
+	int state;
+	uint sz;
+	char name[16];
+};
+
+#endif
+
diff --git a/include/syscall.h b/include/syscall.h
index c55cec2..c56b46f 100644
--- a/include/syscall.h
+++ b/include/syscall.h
@@ -23,5 +23,6 @@
 #define SYS_sbrk   19
 #define SYS_sleep  20
 #define SYS_uptime 21
+#define SYS_getprocs 22
 
 #endif // _SYSCALL_H_
diff --git a/kernel/defs.h b/kernel/defs.h
index c12f8ff..d491896 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -9,6 +9,7 @@ struct pipe;
 struct proc;
 struct spinlock;
 struct stat;
+struct ProcessInfo;
 
 // bio.c
 void            binit(void);
@@ -109,6 +110,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int    		getprocs(struct ProcessInfo *p);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 8e20984..4defa8b 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "ProcessInfo.h"
 
 struct {
   struct spinlock lock;
@@ -12,6 +13,7 @@ struct {
 } ptable;
 
 static struct proc *initproc;
+struct ProcessInfo;
 
 int nextpid = 1;
 extern void forkret(void);
@@ -443,4 +445,28 @@ procdump(void)
   }
 }
 
+int
+getprocs(struct ProcessInfo *processInfoTable){
+  struct proc *p;
+  int counts = 0;
+  int i;
 
+  acquire(&ptable.lock);
+  for(p = ptable.proc, i = 0; p < &ptable.proc[NPROC]; p++, i++){
+    if(p->state != UNUSED){
+      counts++;
+      processInfoTable[i].pid = p->pid;
+      if (p->parent == NULL){
+        processInfoTable[i].ppid = -1;
+      }
+      else{
+        processInfoTable[i].ppid = p->parent->pid;
+      }
+      processInfoTable[i].state = p->state;
+      processInfoTable[i].sz = p->sz;
+      safestrcpy(processInfoTable[i].name, p->name, sizeof(p->name));     
+    }
+  }
+  release(&ptable.lock);
+  return counts;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 28c8308..9cd0876 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -103,6 +103,7 @@ static int (*syscalls[])(void) = {
 [SYS_wait]    sys_wait,
 [SYS_write]   sys_write,
 [SYS_uptime]  sys_uptime,
+[SYS_getprocs] sys_getprocs, 
 };
 
 // Called on a syscall trap. Checks that the syscall number (passed via eax)
diff --git a/kernel/sysfunc.h b/kernel/sysfunc.h
index ee9dafd..b4c8d86 100644
--- a/kernel/sysfunc.h
+++ b/kernel/sysfunc.h
@@ -23,5 +23,6 @@ int sys_unlink(void);
 int sys_wait(void);
 int sys_write(void);
 int sys_uptime(void);
+int sys_getprocs(void);
 
 #endif // _SYSFUNC_H_
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 82b54f9..3e11024 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,9 @@
 #include "mmu.h"
 #include "proc.h"
 #include "sysfunc.h"
+#include "ProcessInfo.h"
+
+struct ProcessInfo;
 
 int
 sys_fork(void)
@@ -88,3 +91,14 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_getprocs(void)
+{ 
+  struct ProcessInfo *p;
+  
+  if(argptr(0, (char**)&p, sizeof(struct ProcessInfo) * NPROC) < 0)
+  //if(argint(0, &argu) < 0)
+   return -1; 
+  return getprocs(p); 	
+}
diff --git a/user/makefile.mk b/user/makefile.mk
index 1441eb8..2ad12e0 100644
--- a/user/makefile.mk
+++ b/user/makefile.mk
@@ -16,7 +16,8 @@ USER_PROGS := \
 	tester\
 	usertests\
 	wc\
-	zombie
+	zombie\
+   	ps
 
 USER_PROGS := $(addprefix user/, $(USER_PROGS))
 
diff --git a/user/ps.c b/user/ps.c
new file mode 100644
index 0000000..cc18f87
--- /dev/null
+++ b/user/ps.c
@@ -0,0 +1,36 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "ProcessInfo.h"
+#include "param.h"
+
+int main(int argc, char **argv)
+{
+  int stdout = 1; 
+  struct ProcessInfo processInfoTable[NPROC];
+  char* states[6];
+    states[0] = "UNUSED";
+    states[1] = "EMBRYO";
+    states[2] = "SLEEPING";
+    states[3] = "RUNNABLE";
+    states[4] = "RUNNING";
+    states[5] = "ZOMBIE";
+   
+  if (argc > 1){
+    printf(stdout, "ps should have no input");
+    exit();
+  }
+  
+  int procNum = getprocs(processInfoTable);
+  //printf(stdout, "%d\n", procNum);
+  int i;
+  for (i = 0; i < procNum; i++){
+    int pid = processInfoTable[i].pid;
+    int ppid = processInfoTable[i].ppid;
+    char* state = states[processInfoTable[i].state];
+    unsigned int sz = processInfoTable[i].sz;
+    printf(stdout, "%d  %d  %s  %d  %s\n", pid, ppid, state, sz, processInfoTable[i].name);   
+  }
+  exit();
+}
+
diff --git a/user/user.h b/user/user.h
index 2b68ee0..e1b308a 100644
--- a/user/user.h
+++ b/user/user.h
@@ -2,6 +2,7 @@
 #define _USER_H_
 
 struct stat;
+struct ProcessInfo;
 
 // system calls
 int fork(void);
@@ -25,6 +26,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getprocs(struct ProcessInfo*);
 
 // user library functions (ulib.c)
 int stat(char*, struct stat*);
diff --git a/user/usys.S b/user/usys.S
index 8bfd8a1..f89931d 100644
--- a/user/usys.S
+++ b/user/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getprocs)
